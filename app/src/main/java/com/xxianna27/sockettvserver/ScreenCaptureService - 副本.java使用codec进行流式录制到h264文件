package com.xxianna27.sockettvserver;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.ServiceInfo;
import android.hardware.display.DisplayManager;
import android.hardware.display.VirtualDisplay;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.media.MediaFormat;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Surface;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;

public class ScreenCaptureService extends Service {

    private MediaProjection mediaProjection;
    private VirtualDisplay virtualDisplay;
    private Handler handler = new Handler(Looper.getMainLooper());

    private MediaCodec mediaCodec;
    private Surface inputSurface;

    private FileOutputStream fileOutputStream;

    int screenWidth = 0;
    int screenHeight = 0;
    int screenDensity = 0;

    @Override
    public void onCreate() {
        super.onCreate();
        startForegroundService();
    }

    @SuppressLint("ForegroundServiceType")
    private void startForegroundService() {
        NotificationChannel channel = new NotificationChannel(
                "ScreenCaptureService",
                "Screen Capture Service",
                NotificationManager.IMPORTANCE_LOW
        );
        NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        manager.createNotificationChannel(channel);

        Notification notification = new Notification.Builder(this, "ScreenCaptureService")
                .setContentTitle("Screen Capture Service")
                .setContentText("Screen capture is active")
                .setSmallIcon(R.drawable.ic_notification)
                .build();

        // 指定 foregroundServiceType
        startForeground(1, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (intent != null) {
            String action = intent.getAction();
            if (action != null && action.equals("init_service")) {
                int resultCode = intent.getIntExtra("resultCode", -1);
                Intent data = intent.getParcelableExtra("data");
                if (resultCode == -1 && data != null) {
                    startCapture(resultCode, data);
                }
            }
        }
        return START_STICKY;
    }

    private void startCapture(int resultCode, Intent data) {
        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
        mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data);

        // 注册 MediaProjection 回调
        mediaProjection.registerCallback(new MediaProjection.Callback() {
            @Override
            public void onStop() {
                releaseResources();
            }
        }, handler);

        DisplayMetrics metrics = getResources().getDisplayMetrics();
        screenWidth = metrics.widthPixels;
        screenHeight = metrics.heightPixels;
        screenDensity = metrics.densityDpi;

        // 配置 MediaCodec
        try {
            mediaCodec = MediaCodec.createEncoderByType("video/avc");
            MediaFormat format = MediaFormat.createVideoFormat("video/avc", screenWidth, screenHeight);
            format.setInteger(MediaFormat.KEY_BIT_RATE, 500000);
            format.setInteger(MediaFormat.KEY_FRAME_RATE, 30);
            format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 1);
            format.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
            mediaCodec.configure(format, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
            inputSurface = mediaCodec.createInputSurface();
            mediaCodec.start();
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // 创建 VirtualDisplay
        virtualDisplay = mediaProjection.createVirtualDisplay(
                "ScreenCapture",
                screenWidth, screenHeight, screenDensity,
                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,
                inputSurface, null, null
        );

        // 创建文件输出流
        try {
            fileOutputStream = new FileOutputStream("/sdcard/Movies/sijerhnfmdsfcsj.h264.mp4");
            startStreaming();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private void startStreaming() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                MediaCodec.BufferInfo bufferInfo = new MediaCodec.BufferInfo();
                int outputBufferId = mediaCodec.dequeueOutputBuffer(bufferInfo, 0);

                if (outputBufferId >= 0) {
                    ByteBuffer outputBuffer = mediaCodec.getOutputBuffer(outputBufferId);
                    if (outputBuffer != null && fileOutputStream != null) {
                        try {
                            byte[] data = new byte[bufferInfo.size];
                            outputBuffer.get(data);
                            fileOutputStream.write(data);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    mediaCodec.releaseOutputBuffer(outputBufferId, false);
                } else if (outputBufferId == MediaCodec.INFO_TRY_AGAIN_LATER) {
                    // 没有可用的输出缓冲区，稍后再试
                } else if (outputBufferId == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
                    // 输出格式发生变化，可以忽略
                }

                // 继续循环读取
                if (!Thread.currentThread().isInterrupted()) {
                    handler.postDelayed(this, 10); // 10ms 后再次执行
                }
            }
        });
    }

    private void releaseResources() {
        if (virtualDisplay != null) {
            virtualDisplay.release();
            virtualDisplay = null;
        }
        if (mediaProjection != null) {
            mediaProjection.stop();
            mediaProjection = null;
        }
        if (mediaCodec != null) {
            mediaCodec.stop();
            mediaCodec.release();
            mediaCodec = null;
        }
        if (inputSurface != null) {
            inputSurface.release();
            inputSurface = null;
        }
        if (fileOutputStream != null) {
            try {
                fileOutputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            fileOutputStream = null;
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        releaseResources();
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}