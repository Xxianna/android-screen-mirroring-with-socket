package com.xxianna27.sockettvserver;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.ServiceInfo;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.PixelFormat;
import android.hardware.display.DisplayManager;
import android.hardware.display.VirtualDisplay;
import android.media.Image;
import android.media.ImageReader;
import android.media.MediaCodec;
import android.media.MediaRecorder;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.util.DisplayMetrics;

import org.jetbrains.annotations.Nullable;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.file.Files;

import android.util.Log; // 需要导入 Log 类
import android.content.Context;

public class ScreenCaptureService extends Service {

    private MediaProjection mediaProjection;
    private VirtualDisplay virtualDisplay;
    private MediaRecorder recorder;
    private Handler handler = new Handler(Looper.getMainLooper());
    private ServerSocket serverSocket;
    private boolean isRunning = true;

    private static final String[] VIDEO_NAMES = {
            "aiusdjnasmd0.mp4",
            "aiusdjnasmd1.mp4",
            "aiusdjnasmd2.mp4"
    };
    int now_video_index = 0;

    int screenWidth = 0;
    int screenHeight = 0;
    int screenDensity = 0;


    @Override
    public void onCreate() {
        super.onCreate();
        startForegroundService();
        startWebServer();
    }

    @SuppressLint("ForegroundServiceType")
    private void startForegroundService() {
        NotificationChannel channel = new NotificationChannel(
                "ScreenCaptureService",
                "Screen Capture Service",
                NotificationManager.IMPORTANCE_LOW
        );
        NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        manager.createNotificationChannel(channel);

        Notification notification = new Notification.Builder(this, "ScreenCaptureService")
                .setContentTitle("Screen Capture Service")
                .setContentText("Capturing screen...")
                .setSmallIcon(R.drawable.ic_notification)
                .build();

        // 指定 foregroundServiceType
        startForeground(1, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (intent != null) {
            int resultCode = intent.getIntExtra("resultCode", -1);
            Intent data = intent.getParcelableExtra("data");
            if (resultCode == -1 && data != null) {
                startCapture(resultCode, data);
            }
        }
        return START_STICKY;
    }

    private void startCapture(int resultCode, Intent data) {
        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
        mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data);

        // 注册 MediaProjection 回调
        mediaProjection.registerCallback(new MediaProjection.Callback() {
            @Override
            public void onStop() {
                // 当 MediaProjection 停止时释放资源
                if (virtualDisplay != null) {
                    virtualDisplay.release();
                    virtualDisplay = null;
                }
                if (recorder != null) {
                    recorder.stop();
                    recorder.release();
                    recorder = null;
                }
                mediaProjection.unregisterCallback(this); // 注销回调
            }
        }, handler);

        DisplayMetrics metrics = getResources().getDisplayMetrics();
        screenWidth = metrics.widthPixels;
        screenHeight = metrics.heightPixels;
        screenDensity = metrics.densityDpi;

        init_recorder(VIDEO_NAMES[0]);
        now_video_index = 0;
        virtualDisplay = mediaProjection.createVirtualDisplay(
                "ScreenCapture",
                screenWidth, screenHeight, screenDensity,
                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,
                recorder.getSurface(), null, null
        );
        recorder.start();

        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                if (recorder != null) {
                    Log.e("hahahahaha","6666666666666666666666666");
                    recorder.stop();
                    recorder.release();
                    recorder = null;
                }
                if (now_video_index == 1){
                    now_video_index = 0;
                }else{
                    now_video_index +=1;
                }
                init_recorder(VIDEO_NAMES[now_video_index]);
                virtualDisplay.setSurface(recorder.getSurface());
                recorder.start();
            }
        }, 5000);
    }
    private void init_recorder(String tmpvideoname){
        recorder = new MediaRecorder();
        recorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT); //音频载体
        recorder.setVideoSource(MediaRecorder.VideoSource.SURFACE); //视频载体
        recorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4); //输出格式
        recorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT); //音频格式
        recorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264); //视频格式
        recorder.setVideoSize(screenWidth, screenHeight); //视频大小
        recorder.setVideoFrameRate(30);
        recorder.setVideoEncodingBitRate(3 * 1024 * 1024);
        File internalStorageDir = MainActivity.getContext().getCacheDir(); // 获取内部存储私有目录
        File videoFile = new File(internalStorageDir, tmpvideoname);
        recorder.setOutputFile(videoFile.getAbsolutePath());
        try {
            recorder.prepare();
        } catch (IOException e) {
            e.printStackTrace();
            // 处理异常的逻辑
        }
    }
    private void startWebServer() {
        new Thread(() -> {
            try {
                serverSocket = new ServerSocket(50000);
                while (isRunning) {
                    Socket clientSocket = serverSocket.accept();
                    handleClientRequest(clientSocket);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
    }

    private void handleClientRequest(Socket clientSocket) {
        try {
            InputStream input = clientSocket.getInputStream();
            OutputStream output = clientSocket.getOutputStream();

            // 读取请求
            byte[] buffer = new byte[1024];
            int bytesRead = input.read(buffer);
            String request = new String(buffer, 0, bytesRead);

            if (request.contains("GET /video")) {
                // 获取当前视频索引
                int currentVideoIndex = now_video_index;
                int nextVideoIndex = (currentVideoIndex + 1) % VIDEO_NAMES.length;

                // 获取当前视频文件
                File currentVideoFile = new File(MainActivity.getContext().getCacheDir(), VIDEO_NAMES[currentVideoIndex]);
                File nextVideoFile = new File(MainActivity.getContext().getCacheDir(), VIDEO_NAMES[nextVideoIndex]);

                // 预加载下一个视频
                byte[] nextVideoBytes = loadVideoFile(nextVideoFile);

                // 读取当前视频文件
                byte[] currentVideoBytes = loadVideoFile(currentVideoFile);

                // 返回 HTTP 响应
                String response = "HTTP/1.1 200 OK\r\n" +
                        "Content-Type: video/mp4\r\n" +
                        "Content-Length: " + currentVideoBytes.length + "\r\n" +
                        "\r\n";
                output.write(response.getBytes());
                output.write(currentVideoBytes);

                // 更新视频索引
                now_video_index = nextVideoIndex;
            } else {
                // 返回网页
                String html = "<html><body style='margin:0; padding:0; overflow:hidden;'>" +
                        "<video id='video' width='100%' height='100%' autoplay controls>" +
                        "<source src='/video' type='video/mp4'>" +
                        "</video>" +
                        "<script>" +
                        "function checkVideo() {" +
                        "   var video = document.getElementById('video');" +
                        "   video.onended = function() {" +
                        "       video.src = '/video?' + new Date().getTime();" +
                        "       video.load();" +
                        "       video.play();" +
                        "   };" +
                        "}" +
                        "window.onload = checkVideo;" +
                        "</script>" +
                        "</body></html>";

                String response = "HTTP/1.1 200 OK\r\n" +
                        "Content-Type: text/html\r\n" +
                        "Content-Length: " + html.length() + "\r\n" +
                        "\r\n" +
                        html;
                output.write(response.getBytes());
            }

            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private byte[] loadVideoFile(File videoFile) {
        byte[] videoBytes = null;
        while (videoBytes == null) {
            try {
                videoBytes = Files.readAllBytes(videoFile.toPath());
            } catch (IOException e) {
                // 如果读取失败，等待100ms后重试
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ie) {
                    ie.printStackTrace();
                }
            }
        }
        return videoBytes;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        isRunning = false;
        if (virtualDisplay != null) {
            virtualDisplay.release();
            virtualDisplay = null;
        }
        if (mediaProjection != null) {
            mediaProjection.stop();
            mediaProjection = null;
        }
        if (recorder != null) {
            recorder.stop();
            recorder.release();
            recorder = null;
        }
        if (serverSocket != null) {
            try {
                serverSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}