package com.xxianna27.sockettvserver;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.ServiceInfo;
import android.hardware.display.DisplayManager;
import android.hardware.display.VirtualDisplay;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.media.MediaFormat;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.StrictMode;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Surface;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.nio.ByteBuffer;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;

public class ScreenCaptureService extends Service {

    private MediaProjection mediaProjection;
    private VirtualDisplay virtualDisplay;
    private Handler handler = new Handler(Looper.getMainLooper());

    private MediaCodec mediaCodec;
    private Surface inputSurface;

    private ServerSocket serverSocket;
    private Socket clientSocket;
    private OutputStream outputStream;
    private ByteBuffer sps;
    private ByteBuffer pps;
    int frameRateint;
    long bitrateint;
    String encodingFormat;
    int portint;

    int screenWidth = 0;
    int screenHeight = 0;
    int screenDensity = 0;

    private AudioRecord audioRecord;
    private MediaCodec audioCodec;
    private Thread audioThread;

    @Override
    public void onCreate() {
        super.onCreate();
        startForegroundService();
    }

    @SuppressLint("ForegroundServiceType")
    private void startForegroundService() {
        NotificationChannel channel = new NotificationChannel(
                "ScreenCaptureService",
                "Screen Capture Service",
                NotificationManager.IMPORTANCE_LOW
        );
        NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        manager.createNotificationChannel(channel);

        Notification notification = new Notification.Builder(this, "ScreenCaptureService")
                .setContentTitle("Screen Capture Service")
                .setContentText("Screen capture is active")
                .setSmallIcon(R.drawable.ic_notification)
                .build();

        // 指定 foregroundServiceType
        startForeground(1, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION);
    }

    private long parseBitrate(String bitrateStr) {
        if (bitrateStr.endsWith("k")) {
            return Long.parseLong(bitrateStr.replace("k", "")) * 1024; // 转换为以 bps 为单位
        } else if (bitrateStr.endsWith("m")) {
            return Long.parseLong(bitrateStr.replace("m", "")) * 1024 * 1024; // 转换为以 bps 为单位
        } else {
            return Long.parseLong(bitrateStr); // 默认单位为 bps
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (intent != null) {
            String action = intent.getAction();
            if (action != null && action.equals("init_service")) {
                int resultCode = intent.getIntExtra("resultCode", -1);
                Intent data = intent.getParcelableExtra("data");
                String frameRate = intent.getStringExtra("frameRate");
                String bitrate = intent.getStringExtra("bitrate");
                encodingFormat = intent.getStringExtra("encodingFormat");
                String port = intent.getStringExtra("port");
                if(port!=null){
                    portint = Integer.parseInt(port);
                }else portint = 12345;
                // 将帧率转换为整数
                if(frameRate!=null){
                    frameRateint = Integer.parseInt(frameRate);
                }else frameRateint = 30;
                // 将码率转换为整数（支持 k 和 M 单位）
                if(bitrate!=null){
                    bitrateint = parseBitrate(bitrate);
                }else bitrateint = 500000;
                if (resultCode == -1 && data != null) {
                    startCapture(resultCode, data);
                }
            }
        }
        return START_STICKY;
    }

    private void startCapture(int resultCode, Intent data) {
        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
        mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data);

        // 注册 MediaProjection 回调
        mediaProjection.registerCallback(new MediaProjection.Callback() {
            @Override
            public void onStop() {
                releaseResources();
            }
        }, handler);

        DisplayMetrics metrics = getResources().getDisplayMetrics();
        screenWidth = metrics.widthPixels;
        screenHeight = metrics.heightPixels;
        screenDensity = metrics.densityDpi;

        // 创建 VirtualDisplay
        virtualDisplay = mediaProjection.createVirtualDisplay(
                "ScreenCapture",
                screenWidth, screenHeight, screenDensity,
                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,
                null, null, null
        );




        //禁用主线程网络操作检查
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        //socket服务器
        new Thread(this::startSocketServer).start();
    }

    private void startSocketServer() {
        try {
            serverSocket = new ServerSocket(portint); // 使用 12345 端口
            while (true) {
                if (clientSocket == null || clientSocket.isClosed()) {
                    clientSocket = serverSocket.accept(); // 等待客户端连接
                    outputStream = clientSocket.getOutputStream();
                    // 配置 MediaCodec
                    try {
                        mediaCodec = MediaCodec.createEncoderByType("video/avc");
                        MediaFormat format = MediaFormat.createVideoFormat("video/avc", screenWidth, screenHeight);
                        format.setInteger(MediaFormat.KEY_BIT_RATE, (int) bitrateint);
                        format.setInteger(MediaFormat.KEY_FRAME_RATE, frameRateint);
                        format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 1);
                        format.setInteger(MediaFormat.KEY_COLOR_FORMAT, MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);

                        sps = format.getByteBuffer("csd-0"); // SPS
                        pps = format.getByteBuffer("csd-1"); // PPS

                        mediaCodec.configure(format, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);
                        inputSurface = mediaCodec.createInputSurface();
                        mediaCodec.start();
                    } catch (IOException e) {
                        e.printStackTrace();
                        return;
                    }
                    virtualDisplay.setSurface(inputSurface);
                    startStreaming();
                } else {
                    // 如果没有新的客户端连接，等待 500 毫秒
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void startStreaming() {
        while(true){
            MediaCodec.BufferInfo bufferInfo = new MediaCodec.BufferInfo();
            int outputBufferId = mediaCodec.dequeueOutputBuffer(bufferInfo, 0);

            if (outputBufferId >= 0) {
                ByteBuffer outputBuffer = mediaCodec.getOutputBuffer(outputBufferId);
                if (outputBuffer != null && outputStream != null) {
                    byte[] data = new byte[bufferInfo.size];
                    outputBuffer.get(data);
                    try {
                        outputStream.write(data); // 尝试向客户端写入数据
                    } catch (SocketException e) {
                        e.printStackTrace(); // 打印异常日志
                        // 处理连接断开
                        if (clientSocket != null && !clientSocket.isClosed()) {
                            try {
                                clientSocket.close(); // 关闭客户端Socket
                                outputStream = null;
                                break;
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace(); // 处理其他IO异常
                    }
                }
                mediaCodec.releaseOutputBuffer(outputBufferId, false);
            } else if (outputBufferId == MediaCodec.INFO_TRY_AGAIN_LATER) {
                // 没有可用的输出缓冲区，稍后再试
            } else if (outputBufferId == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
                // 输出格式发生变化，可以忽略
            }

            // 继续循环读取
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }


    private void releaseResources() {
        if (virtualDisplay != null) {
            virtualDisplay.release();
            virtualDisplay = null;
        }
        if (mediaProjection != null) {
            mediaProjection.stop();
            mediaProjection = null;
        }
        if (mediaCodec != null) {
            mediaCodec.stop();
            mediaCodec.release();
            mediaCodec = null;
        }
        if (inputSurface != null) {
            inputSurface.release();
            inputSurface = null;
        }
        if (outputStream != null) {
            try {
                outputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            outputStream = null;
        }
        if (clientSocket != null) {
            try {
                clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            clientSocket = null;
        }
        if (serverSocket != null) {
            try {
                serverSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            serverSocket = null;
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        releaseResources();
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}