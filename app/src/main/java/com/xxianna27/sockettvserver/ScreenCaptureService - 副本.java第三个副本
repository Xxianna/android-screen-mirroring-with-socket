package com.xxianna27.sockettvserver;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.content.pm.ServiceInfo;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.PixelFormat;
import android.hardware.display.DisplayManager;
import android.hardware.display.VirtualDisplay;
import android.media.Image;
import android.media.ImageReader;
import android.media.MediaCodec;
import android.media.MediaRecorder;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.util.DisplayMetrics;

import org.jetbrains.annotations.Nullable;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import android.util.Log; // 需要导入 Log 类

public class ScreenCaptureService extends Service {

    private MediaProjection mediaProjection;
    private VirtualDisplay virtualDisplay;
    private ImageReader imageReader;
    private MediaRecorder recorder;
    private Handler handler = new Handler(Looper.getMainLooper());
    private ServerSocket serverSocket;
    private boolean isRunning = true;

    private volatile Image latestImage = null; // 新增变量，用于存储最新的截图

    @Override
    public void onCreate() {
        super.onCreate();
        startForegroundService();
        startWebServer();
    }

    @SuppressLint("ForegroundServiceType")
    private void startForegroundService() {
        NotificationChannel channel = new NotificationChannel(
                "ScreenCaptureService",
                "Screen Capture Service",
                NotificationManager.IMPORTANCE_LOW
        );
        NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        manager.createNotificationChannel(channel);

        Notification notification = new Notification.Builder(this, "ScreenCaptureService")
                .setContentTitle("Screen Capture Service")
                .setContentText("Capturing screen...")
                .setSmallIcon(R.drawable.ic_notification)
                .build();

        // 指定 foregroundServiceType
        startForeground(1, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (intent != null) {
            int resultCode = intent.getIntExtra("resultCode", -1);
            Intent data = intent.getParcelableExtra("data");
            if (resultCode == -1 && data != null) {
                startCapture(resultCode, data);
            }
        }
        return START_STICKY;
    }

    private void startCapture(int resultCode, Intent data) {
        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
        mediaProjection = mediaProjectionManager.getMediaProjection(resultCode, data);

        // 注册 MediaProjection 回调
        mediaProjection.registerCallback(new MediaProjection.Callback() {
            @Override
            public void onStop() {
                // 当 MediaProjection 停止时释放资源
                if (virtualDisplay != null) {
                    virtualDisplay.release();
                    virtualDisplay = null;
                }
                if (imageReader != null) {
                    imageReader.close();
                    imageReader = null;
                }
                if (latestImage != null) {
                    latestImage.close();
                    latestImage = null;
                }
                if (recorder != null) {
                    recorder.stop();
                    recorder.release();
                    recorder = null;
                }
                mediaProjection.unregisterCallback(this); // 注销回调
            }
        }, handler);

        DisplayMetrics metrics = getResources().getDisplayMetrics();
        int screenWidth = metrics.widthPixels;
        int screenHeight = metrics.heightPixels;
        int screenDensity = metrics.densityDpi;

        recorder = new MediaRecorder();
        recorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT); //音频载体
        recorder.setVideoSource(MediaRecorder.VideoSource.SURFACE); //视频载体
        recorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4); //输出格式
        recorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT); //音频格式
        recorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264); //视频格式
        recorder.setVideoSize(screenWidth, screenHeight); //视频大小
        recorder.setVideoFrameRate(30);
        recorder.setVideoEncodingBitRate(3 * 1024 * 1024);
        recorder.setOutputFile("/sdcard/Movies/aiusdjnasmd.mp4");
        try {
            recorder.prepare();
        } catch (IOException e) {
            e.printStackTrace();
            // 处理异常的逻辑
        }


        // 修改 ImageReader 的格式为 PixelFormat.RGBA_8888
//        imageReader = ImageReader.newInstance(screenWidth, screenHeight, PixelFormat.RGBA_8888, 3);
        virtualDisplay = mediaProjection.createVirtualDisplay(
                "ScreenCapture",
                screenWidth, screenHeight, screenDensity,
                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,
                recorder.getSurface(), null, null
        );
        recorder.start();
//        imageReader.setOnImageAvailableListener(new ImageReader.OnImageAvailableListener() {
//            @Override
//            public void onImageAvailable(ImageReader reader) {
//                // 在这里处理可用的图像数据
////                Image image = reader.acquireLatestImage();
////                if (image != null) {
////                    // 处理图像数据
////                    image.close();
////                }
//                captureScreen();
//            }
//        }, null);
        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
//                captureScreen();
//                recorder.stop();
                if (recorder != null) {
                    Log.e("hahahahaha","6666666666666666666666666");
                    recorder.stop();
                    recorder.release();
                    recorder = null;
                }
//                recorder.start();
            }
        }, 5000);
    }


    private void captureScreen() {
        Image image = imageReader.acquireLatestImage();
        if (image != null) {
            // 如果之前有截图，先关闭
            if (latestImage != null) {
                latestImage.close();
            }
            latestImage = image; // 存储最新的截图
            Log.d("ScreenCaptureService", "captureScreen: New screenshot captured and stored.888888888888888888888888888888"); // 调试输出
        } else {
            Log.d("ScreenCaptureService", "captureScreen: No new screenshot available.88888888888888888888888888888888888888"); // 调试输出
        }
    }

    private void startWebServer() {
        new Thread(() -> {
            try {
                serverSocket = new ServerSocket(50000);
                while (isRunning) {
                    Socket clientSocket = serverSocket.accept();
                    handleClientRequest(clientSocket);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
    }

    private void handleClientRequest(Socket clientSocket) {
        try {
            InputStream input = clientSocket.getInputStream();
            OutputStream output = clientSocket.getOutputStream();

            // 读取请求
            byte[] buffer = new byte[1024];
            int bytesRead = input.read(buffer);
            String request = new String(buffer, 0, bytesRead);

            if (request.contains("GET /screenshot")) {
                // 返回截图
//                Image image = imageReader.acquireNextImage();
//                if (image != null) {
//                    Bitmap bitmap = imageToBitmap(image);
//                    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
//                    bitmap.compress(Bitmap.CompressFormat.JPEG, 80, byteArrayOutputStream);
//                    byte[] imageBytes = byteArrayOutputStream.toByteArray();
//
//                    // 返回 HTTP 响应
//                    String response = "HTTP/1.1 200 OK\r\n" +
//                            "Content-Type: image/jpeg\r\n" +
//                            "Content-Length: " + imageBytes.length + "\r\n" +
//                            "\r\n";
//                    output.write(response.getBytes());
//                    output.write(imageBytes);
//                    image.close();
//                } else {
//                    // 如果没有截图，返回 404
//                    String response = "HTTP/1.1 404 Not Found\r\n\r\n";
//                    output.write(response.getBytes());
//                }
                if (latestImage != null) { // 判断是否有截图
                    Bitmap bitmap = imageToBitmap(latestImage);
                    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                    bitmap.compress(Bitmap.CompressFormat.JPEG, 80, byteArrayOutputStream);
                    byte[] imageBytes = byteArrayOutputStream.toByteArray();

                    // 返回 HTTP 响应
                    String response = "HTTP/1.1 200 OK\r\n" +
                            "Content-Type: image/jpeg\r\n" +
                            "Content-Length: " + imageBytes.length + "\r\n" +
                            "\r\n";
                    output.write(response.getBytes());
                    output.write(imageBytes);
                } else {
                    // 如果没有截图，返回 404
                    String response = "HTTP/1.1 404 Not Found\r\n\r\n";
                    output.write(response.getBytes());
                }
            } else {
                // 返回网页
                String html = "<html><body style='margin:0; padding:0; overflow:hidden;'>" +
                        "<img id='screenshot' src='/screenshot' style='display:none;'/>" +
                        "<script>" +
                        "function resizeImage() {" +
                        "   var img = document.getElementById('screenshot');" +
                        "   var windowWidth = window.innerWidth;" +
                        "   var windowHeight = window.innerHeight;" +
                        "   var imgWidth = img.naturalWidth;" +
                        "   var imgHeight = img.naturalHeight;" +
                        "" +
                        "   var widthRatio = windowWidth / imgWidth;" +
                        "   var heightRatio = windowHeight / imgHeight;" +
                        "   var scale = Math.min(widthRatio, heightRatio);" +
                        "" +
                        "   img.style.width = (imgWidth * scale) + 'px';" +
                        "   img.style.height = (imgHeight * scale) + 'px';" +
                        "   img.style.display = 'block';" +
                        "}" +
                        "" +
                        "window.onload = function() {" +
                        "   var img = document.getElementById('screenshot');" +
                        "   img.onload = resizeImage;" +
                        "   setInterval(function() {" +
                        "       img.src = '/screenshot?' + new Date().getTime();" +
                        "   }, 6000);" +
                        "};" +
                        "" +
                        "window.onresize = resizeImage;" +
                        "</script>" +
                        "</body></html>";

                String response = "HTTP/1.1 200 OK\r\n" +
                        "Content-Type: text/html\r\n" +
                        "Content-Length: " + html.length() + "\r\n" +
                        "\r\n" +
                        html;
                output.write(response.getBytes());
            }

            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Bitmap imageToBitmap(Image image) {
        if (image == null) {
            return null; // 如果 image 为 null，直接返回 null
        }

        Image.Plane[] planes = image.getPlanes();
        ByteBuffer buffer = planes[0].getBuffer();
        int width = image.getWidth();
        int height = image.getHeight();
        int pixelStride = planes[0].getPixelStride(); // 每个像素的字节数
        int rowStride = planes[0].getRowStride(); // 每行的字节数

        // 创建一个 Bitmap 对象
        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);

        // 将图像数据复制到 Bitmap 中
        if (pixelStride == 4 && rowStride == width * pixelStride) {
            // 如果 pixelStride 为 4 且没有填充字节，直接复制数据
            bitmap.copyPixelsFromBuffer(buffer);
        } else {
            // 如果 pixelStride 不为 4 或者有填充字节，需要手动处理每行数据
            byte[] rowData = new byte[rowStride];
            int[] pixels = new int[width * height];
            buffer.rewind();

            for (int y = 0; y < height; y++) {
                buffer.get(rowData, 0, rowStride);
                for (int x = 0; x < width; x++) {
                    int r = rowData[x * pixelStride] & 0xFF; // 红色分量
                    int g = rowData[x * pixelStride + 1] & 0xFF; // 绿色分量
                    int b = rowData[x * pixelStride + 2] & 0xFF; // 蓝色分量
                    int a = rowData[x * pixelStride + 3] & 0xFF; // 透明度分量
                    pixels[y * width + x] = (a << 24) | (r << 16) | (g << 8) | b; // ARGB
                }
            }

            // 将像素数据设置到 Bitmap 中
            bitmap.setPixels(pixels, 0, width, 0, 0, width, height);
        }

        return bitmap;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        isRunning = false;
        if (virtualDisplay != null) {
            virtualDisplay.release();
            virtualDisplay = null;
        }
        if (mediaProjection != null) {
            mediaProjection.stop();
            mediaProjection = null;
        }
        if (imageReader != null) {
            imageReader.close();
            imageReader = null;
        }
        if (latestImage != null) {
            latestImage.close();
            latestImage = null;
        }
        if (serverSocket != null) {
            try {
                serverSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }
}